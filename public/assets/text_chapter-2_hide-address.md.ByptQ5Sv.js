import{_ as t,c as s,o as e,ag as i}from"./chunks/framework.DPDPlp3K.js";const g=JSON.parse('{"title":"メールアドレスの秘匿","description":"","frontmatter":{},"headers":[],"relativePath":"text/chapter-2/hide-address.md","filePath":"text/chapter-2/hide-address.md"}'),p={name:"text/chapter-2/hide-address.md"};function n(r,a,l,h,o,d){return e(),s("div",null,a[0]||(a[0]=[i(`<h1 id="メールアドレスの秘匿" tabindex="-1">メールアドレスの秘匿 <a class="header-anchor" href="#メールアドレスの秘匿" aria-label="Permalink to &quot;メールアドレスの秘匿&quot;">​</a></h1><p>ここからはあなたの Git デビューに黒歴史を作らないための老婆心みたいな章立てです。Git の操作としてはここまでの章ですでに十分ですが、Gitea や GitHub の公開リポジトリで作業をする際にぜひ覚えておいてほしいことを書いています。</p><h2 id="git-とメールアドレス" tabindex="-1">Git とメールアドレス <a class="header-anchor" href="#git-とメールアドレス" aria-label="Permalink to &quot;Git とメールアドレス&quot;">​</a></h2><p>Git では、開発に関わった個人を見分ける ID としてメールアドレスの文字列それ自体が使われています。<a href="/text/chapter-1/requirements.html#git-の設定">必要なツール</a> の Git の設定にてターミナルに打ち込んだメールアドレスです。</p><p>リポジトリにおけるコミットやその他の操作の履歴にはこのメールアドレスが埋め込まれ、リポジトリが公開されている場合はアドレスも公開されます。ただし、Git やホスティングサービスによってこのアドレスに自動的に何かが送られてくることはありません。</p><div class="tip custom-block"><p class="custom-block-title">コミットの埋め込み情報</p><p>何かのリポジトリ（たとえば <a href="https://github.com/traPtitech/traQ_S-UI" target="_blank" rel="noreferrer">traQ-S_UI</a>）をローカルにクローンしてきて、そこでターミナルを開いて以下を実行してみましょう。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> log</span></span></code></pre></div><p>すると、歴代のコミットに付属する「コミットハッシュ」「作者の名前とメールアドレス」「作成日時」「コミットメッセージ」などの情報が以下のようなフォーマットで表示されます。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>commit aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa</span></span>
<span class="line"><span>Author: kitsne &lt;169665926+kitsne241@users.noreply.github.com&gt;</span></span>
<span class="line"><span>Date:   Sat Jan 1 12:00:00 2100 +0900</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    fix: このコミットメッセージはサンプルです</span></span></code></pre></div><p><code>git log</code> の表示は Q キーを押すことで中断できます。このように、コミットに埋め込まれる作者名やメールアドレスなどの情報は公開リポジトリならば誰もが容易に閲覧できます。</p></div><p>一度コミットに埋め込まれたメールアドレスはあとから抹消することが非常に困難です。従って、公開リポジトリに不用意にメールアドレスを埋め込むのはリスクと言えます。もちろん、リスクを弁えた上でメールアドレスの公開設定を変更しない人もいます。</p><div class="info custom-block"><p class="custom-block-title">メールアドレスが ID だった時代</p><p>それぞれのメールアドレスは世界的にユニークであることが保証されているので、かつては個人を表す ID として公開・使用するのが一般的だったようです。コミットにメールアドレスが埋め込まれる仕様になっているのもそのときの慣習の名残といえます。</p><p><a href="/text/chapter-1/gitea-ssh.html#ssh-キーの生成">SSH キーの登録</a> において SSH キーを生成するにあたり、ユーザー名を用いて以下のコマンドを実行していただきました。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ssh-keygen</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ed25519</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -C</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ユーザー名</span></span></code></pre></div><p>この「ユーザー名」にあたる部分にもメールアドレスを記述する文化が今も一般的です。この部分は公開鍵の末尾に単にラベルとして含まれるテキストであり、技術的にはなんでもよく、メールアドレスである必要はありませんが、2025 年現在の <a href="https://docs.github.com/ja/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent" target="_blank" rel="noreferrer">GitHub Docs</a> にもユーザー名の部分にメールアドレスを記述して SSH キーを生成するコマンド例が載っています。</p><p>しかしながら、現代ではメールアドレスが果たす ID としての役割は薄れ、むしろ不用意にさまざまな場所にメールアドレスを書くことがスパムや持ち主の再識別のリスクを高めています。そのため、この講習会は不要なメールアドレスの記入を避ける手順になっています。</p></div><h2 id="メールアドレスの秘匿-1" tabindex="-1">メールアドレスの秘匿 <a class="header-anchor" href="#メールアドレスの秘匿-1" aria-label="Permalink to &quot;メールアドレスの秘匿&quot;">​</a></h2><p>メールアドレスを公開したくないというニーズに応えるため、traP Gitea や GitHub は各ユーザーにダミーのメールアドレスを提供しています。コミットメールアドレスをこれに変更することで、個人的に使っているメールアドレスの公開を避けつつ Gitea アカウントとコミットをしっかりと紐づけることができます。</p><p>Gitea でダミーのメールアドレスを利用する方法を説明します。<a href="https://git.trap.jp/user/settings" target="_blank" rel="noreferrer">プロフィール設定</a> のページを開き、「メールアドレスを隠す」チェックボックスを見つけてチェックを入れてください。</p><p><img src="https://md.trap.jp/uploads/upload_230ac119709bf6d24ec44cd12165da49.png" alt=""></p><p>ここにポインターをかざすと、上のような表示が出てきます。要は、あなたの個人的なメールアドレスではなく <code>ユーザー名@trap.jp</code> という無効なメールアドレスを用いてもよい、ということです。このアドレスはメールアドレスとしては機能しておらず、実際にメールを送りつけることはできません。</p><p>次に、ここに表示されているメールアドレスで Git を設定し直します。<a href="/text/chapter-1/requirements.html#git-の設定">必要なツール</a> の章で実行したコマンドの「メールアドレス」をダミーメールアドレスで置き換えたものです。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --global</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> user.email</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ユーザー名@trap.jp</span></span></code></pre></div><p>これで Git リポジトリを扱う際にはあなたの個人用メールアドレスではなくダミーメールアドレス <code>ユーザー名@trap.jp</code> が活用されるようになりました。あなたの個人用メールアドレスは今後コミットに埋め込まれることがなくなります。ただし、すでに埋め込まれてしまったメールアドレスを抹消・置換することは困難です（不可能とは言いませんが…）。一度でも公開リポジトリで作業をする前にこの章を追っておくと安心ですね。</p><h2 id="trap-と-github-公開リポジトリ" tabindex="-1">traP と GitHub 公開リポジトリ <a class="header-anchor" href="#trap-と-github-公開リポジトリ" aria-label="Permalink to &quot;traP と GitHub 公開リポジトリ&quot;">​</a></h2><p>ダミーメールアドレスの設定は、どちらかといえばあなたが traP Gitea ではなく GitHub で活動していく上でとても大切な設定です。なぜなら、traP Gitea のリポジトリは公開範囲が部内に限られる一方、GitHub の公開リポジトリは文字通り全世界に公開されているからです。</p><p>traP では、毎年 6 月から 7 月にかけて、主に新入 SysAd 班員を対象として <a href="https://q.trap.jp/channels/team/SysAd/QSoC" target="_blank" rel="noreferrer">QSoC</a> という自由参加のイベントが開かれます。このイベントは traQ などの traP 内製サービスの開発に貢献してみようという趣旨のものです。</p><p>traQ をはじめとする traP SysAd 班のサービスは全て GitHub 上で管理されており、ほとんどが一般に公開されています。従って、QSoC に参加する際は GitHub のアカウントを作成し、一般に公開されたリポジトリに貢献の足跡を残すことになります。SysAd 班での活動を考えているなら GitHub の公開リポジトリ上での開発は日常的なものになります。</p><div class="tip custom-block"><p class="custom-block-title">traP Gitea が活用される場面</p><p>GitHub は CI/CD など開発に関する機能が多くて何かと便利なのですが、大きいファイルのアップロードに関する制約が多く、ゲーム開発に用いるには適さないことがあります。このため、ゲーム班やプロジェクトの活動ではしばしば Gitea にリポジトリが置かれています。</p><p>また、部外に公開すべきでない情報を扱う際も Gitea が用いられることがあります。たとえば traP のサークル規約の原本、役員会に関係する資料、合宿のしおりなどは Gitea に置かれています。</p></div><p>そのため、GitHub で同様にダミーのメールアドレスを利用する方法についてもここで説明しておきます。まだ GitHub のアカウントを持つ予定がなければ、ここは飛ばして大丈夫です。</p><p>GitHub の <a href="https://github.com/settings/emails" target="_blank" rel="noreferrer">E メールの設定</a> を開き、<strong>Keep my email addresses private</strong> にチェックを入れます。その下の <strong>Block command line pushes that expose my email</strong> にもチェックを入れておくと、ダミーでないメールアドレスでコミットのプッシュを試みたときにブロックしてくれます。</p><p><img src="https://md.trap.jp/uploads/upload_eb48eee1fa4b71416a70d5dd830c3d70.png" alt=""></p><p>あとは同様に <code>git config</code> コマンドでメールアドレスを適用させればよいです。</p><p>あなたがもし GitHub アカウントを作った時は、真っ先にこの設定を有効にすることをおすすめします。「別にメールアドレスを埋め込むくらい大した問題じゃないでしょー」と思うなら、そう思えるくらい Git について理解を深めたときに戻すのでもよいでしょう。</p><div class="warning custom-block"><p class="custom-block-title">GitHub と Gitea の設定の両立</p><p>Gitea のダミーアドレスの設定と GitHub のダミーアドレスの設定は競合します。たとえば、GitHub のダミーアドレスを <code>git config</code> でグローバルに設定すると、traP Gitea 側でコミットのメールアドレスからユーザーを特定できず、以下のようにアイコンが正しく表示されなくなります。</p><p><img src="https://md.trap.jp/uploads/upload_cd347e3ea6e9506d8f224bd8686aa294.png" alt=""></p><p>コミットのメールアドレスの設定は、グローバルに効かせるほか、それぞれのリポジトリに対して個別で効かせることもできます。GitHub と Gitea のうちどちらか一方をメインで使っていく場合には、多く使う方のダミーアドレスをグローバルに設定しておいて、あまり使わない方のリポジトリには個別で以下のようにローカル設定を書いておくとよいでしょう。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> user.email</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ダミーメールアドレス</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # --global をつけない</span></span></code></pre></div><p>GitHub と Gitea のどちらもよく使うようになった時は <code>~/.gitconfig</code> の内容を直書きし <code>includeIf</code> を用いて設定を分岐させる方法がおすすめですが、発展的な内容になるので割愛します。詳しいことは <a href="https://q.trap.jp/channels/event/workshop/git/sodan" target="_blank" rel="noreferrer">#event/workshop/git/sodan</a> や <a href="https://q.trap.jp/channels/random/sodan" target="_blank" rel="noreferrer">#random/sodan</a> などで質問すると教えてもらえるはず。</p></div>`,27)]))}const k=t(p,[["render",n]]);export{g as __pageData,k as default};
