import{_ as s,c as a,o as t,ag as e}from"./chunks/framework.DPDPlp3K.js";const k=JSON.parse('{"title":"CLI と GUI","description":"","frontmatter":{},"headers":[],"relativePath":"text/chapter-1/cli-and-gui.md","filePath":"text/chapter-1/cli-and-gui.md"}'),l={name:"text/chapter-1/cli-and-gui.md"};function n(p,i,h,r,o,c){return t(),a("div",null,i[0]||(i[0]=[e(`<h1 id="cli-と-gui" tabindex="-1">CLI と GUI <a class="header-anchor" href="#cli-と-gui" aria-label="Permalink to &quot;CLI と GUI&quot;">​</a></h1><p><strong>CLI</strong>（Command Line Interface）と <strong>GUI</strong>（Graphical User Interface）について紹介します。この章ではとくに手を動かすことはないので、肩の力を抜いて読み進めてください。</p><h2 id="cli-と-gui-1" tabindex="-1">CLI と GUI <a class="header-anchor" href="#cli-と-gui-1" aria-label="Permalink to &quot;CLI と GUI&quot;">​</a></h2><p>これらはともに画面の構成や機能（インターフェース）に関する概念です。</p><ul><li><strong>CLI</strong> ... 画面に同じ大きさの文字だけが並んでいて、文字を打ち込むことだけができる</li><li><strong>GUI</strong> ... 画面が縦横に区切られたり、場所ごとに字の大きさが調節されたりして見やすいレイアウトがなされている。文字を打ち込むだけでなく、ボタンをクリックしたりできる</li></ul><p>と考えておおよそ間違いはないと思います。</p><div class="tip custom-block"><p class="custom-block-title">MS-DOS と Windows</p><p>Microsoft が MS-DOS という OS を発表したのは 1981 年のことです。MS-DOS そのものには「ウィンドウ」とか「（画面に表示される）ボタン」のような概念が存在せず、基本的な MS-DOS の操作は（ハッカーのステレオタイプみたいに）文字だけの画面に対してキーボードでコマンドを入力することだけでした。1985 年に Microsoft は MS-DOS 上で動作する GUI 環境「Windows 1.0」をリリースし、これによって今の PC に近い使用感で操作できるようになりました。「Windows」という名前はこの「ウィンドウ」という概念の採用に由来するとも言われています（諸説あり）。</p><p><a href="https://ja.wikipedia.org/wiki/MS-DOS" target="_blank" rel="noreferrer">https://ja.wikipedia.org/wiki/MS-DOS</a></p><p>MS-DOS が提供していた「文字の入力と表示だけができる」インターフェースは <strong>CLI</strong>、Windows が可能にした「見やすい画面を分かりやすく操作できる」インターフェースは <strong>GUI</strong> のよい例と言えます。</p></div><p>今ではほぼ全ての PC の OS に GUI が採用されていますが、CLI は <strong>ターミナル</strong> と呼ばれるアプリケーションとして残されています。とはいえ多くの人にとって CLI は馴染みがなく、<a href="https://pg-basic.trap.show/about.html" target="_blank" rel="noreferrer">プログラミング基礎講習会</a> で初めて触った人もいると思います。</p><h2 id="なぜ-cli-を使うのか" tabindex="-1">なぜ CLI を使うのか <a class="header-anchor" href="#なぜ-cli-を使うのか" aria-label="Permalink to &quot;なぜ CLI を使うのか&quot;">​</a></h2><p>一般ユーザー向けのソフトウェアには視覚的に分かりやすい GUI が用意されることがほとんどですが、開発に用いられるソフトウェアには CLI での操作のみを受け付けるものも多く存在します。一聴すると不便な話ですが、いくつか理由はありそうです。</p><ul><li>GUI を見やすく作り、継続的に管理していくことは思ったよりも大変</li><li>元からソフトウェアが複雑なことをしていたら、いろいろ考えて GUI を用意しても結局分かりやすくならない場合もある</li><li>ユーザーとしても、ソフトウェア同士の連動や自動化をするなら CLI の方が扱いやすい</li></ul><h2 id="cli-としての-git" tabindex="-1">CLI としての Git <a class="header-anchor" href="#cli-としての-git" aria-label="Permalink to &quot;CLI としての Git&quot;">​</a></h2><p>Git は CLI で動作するソフトウェアの一つです。traP、とくに SysAd 班での活動では、CLI で動作するソフトウェアの幾つかに慣れ親しんだり、今まで便利に扱ってきたアプリケーションの中に CLI ソフトウェアを見出したりすることがあるかも知れません。もしあなたがその類のソフトウェアを扱ったことがないならば、Git はその記念すべき第 1 号として触ってみるに相応しいソフトウェアであると言えます。</p><p>Git はたとえば以下のようなコマンドによって操作します。最初の <code>git</code> が Git に対するコマンドの指定です。Git に限らず多くの CLI ソフトウェアのコマンドは使用するソフトウェアを指定する接頭辞をつけます。それぞれのコマンドの意味は前編の後半に説明します。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> リポジトリのURL</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> checkout</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ブランチ名</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pull</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ブランチ名</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> merge</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ブランチ名</span></span></code></pre></div><p>以下を実行すると、Git の操作で使用可能な全てのコマンドを見ることができます。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> help</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">GUI としても提供される Git</p><p>「Git は CLI ソフトウェアだ」という話をしたばかりですが、この講習会の本編では実際に Git のコマンドをターミナルに打ち込む操作をほとんど行いません。なぜなら、少なくとも VSCode（そしておそらくその他いくつかのメジャーなコードエディタ）では GUI の操作によって Git の多くの機能を利用できるようになっているからです。コマンドで直接 Git を操作しなければできないこともありますが、とりあえず VSCode 上での Git の操作を覚えておけばしばらく困ることはないはずです。</p></div><p>次の章から、いよいよ Git を触ります。</p>`,19)]))}const g=s(l,[["render",n]]);export{k as __pageData,g as default};
