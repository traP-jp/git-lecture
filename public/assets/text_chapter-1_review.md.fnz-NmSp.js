import{_ as a,c as e,o as t,ag as i}from"./chunks/framework.DPDPlp3K.js";const k=JSON.parse('{"title":"用語の復習","description":"","frontmatter":{},"headers":[],"relativePath":"text/chapter-1/review.md","filePath":"text/chapter-1/review.md"}'),o={name:"text/chapter-1/review.md"};function p(d,s,n,l,c,r){return t(),e("div",null,s[0]||(s[0]=[i('<h1 id="用語の復習" tabindex="-1">用語の復習 <a class="header-anchor" href="#用語の復習" aria-label="Permalink to &quot;用語の復習&quot;">​</a></h1><p>この実習資料の手順の中で、何度かターミナル上でコマンドを実行することがあります。<a href="https://pg-basic.trap.show/text/chapter-1/terminal.html" target="_blank" rel="noreferrer">プログラミング基礎講習会の第 1 章</a> にも登場した概念ですが、まずはそれらを復習しましょう。</p><div class="warning custom-block"><p class="custom-block-title">Windows ユーザーの方へ</p><p>この章の後半で環境構築の操作を行います。注意して読んでほしいです！</p></div><h2 id="ディレクトリ" tabindex="-1">ディレクトリ <a class="header-anchor" href="#ディレクトリ" aria-label="Permalink to &quot;ディレクトリ&quot;">​</a></h2><p>この講習会には『ディレクトリ』という言葉が頻繁に登場します。『ディレクトリ』とは、色々な種類のファイルをコンピュータの中で保存するための入れ物です。もし『フォルダ』という言葉を知っているなら、『ディレクトリ』はその単なる別名で、同じものです。</p><p>また、あらゆるディレクトリを含んだディレクトリを『<strong>ルートディレクトリ</strong>』あるいは単に『<strong>ルート</strong>』と呼びます。ふつう『ルート』といえば「そのデバイス（環境）の全てのファイルを含む一番上のディレクトリ」を指します。つまり、真の意味での『ルート』は環境につき一つだけ存在します。ただし、ある意味上のまとまり（たとえば、この後登場する Git リポジトリ）の『一番上』のディレクトリも広義の『ルート』と呼ばれることがあります。</p><p>また、個々のユーザーのために用意されているディレクトリを『<strong>ホームディレクトリ</strong>』と呼びます。ルートとは別物です。</p><h2 id="ターミナル" tabindex="-1">ターミナル <a class="header-anchor" href="#ターミナル" aria-label="Permalink to &quot;ターミナル&quot;">​</a></h2><p>語弊がある言い方にはなりますが、ターミナルは Mac でいう Finder、Windows でいうエクスプローラーの『不親切版』として扱うことができます。ターミナルの画面は、Finder やエクスプローラーであるディレクトリを開いているときの画面に対応します。</p><p>Finder やエクスプローラーなら、今見ているディレクトリ（カレントディレクトリ）がどんな種類のファイルを含んでいるか、という情報はウィンドウを見ればわかります。が、ターミナル上では <code>ls</code> とコマンドを打たなければファイル名一覧を見ることができません。今開いているディレクトリ A の中のディレクトリ B に移動するには、Finder やエクスプローラーなら表示されている B をダブルクリックすれば済むことですが、ターミナルでは <code>cd B</code> とコマンドを打って移動することになります。</p><p>なぜこんな不親切なものを使っているのか？ という話には少し先の <a href="/text/chapter-1/cli-and-gui.html">CLI と GUI</a> の章で触れています。とりあえず今はターミナル上でも Finder やエクスプローラーと同じ操作ができる、という認識だけ持ってもらえれば大丈夫です。</p><h2 id="windows-ユーザーの方へ" tabindex="-1">Windows ユーザーの方へ <a class="header-anchor" href="#windows-ユーザーの方へ" aria-label="Permalink to &quot;Windows ユーザーの方へ&quot;">​</a></h2><div class="danger custom-block"><p class="custom-block-title">Windows ユーザーに限り、必ず以下を実行</p><p>Windows デバイスでこの講習会に参加されている人は、必ずこの後の手順を追ってください。この後の手順を飛ばすと以降の講習会での操作が正常に進行しなくなります。逆に、Windows でないデバイスで参加されている人はこの後を読み飛ばして次の章に進んでください。</p></div><p>プログラミング基礎講習会に従って環境構築を済ませていれば、Windows Terminal（以降単に『ターミナル』と呼ぶ）を開いたとき自動的に WSL2 環境に入るようになっています。ターミナルの画面に以下を打ち込んで Enter を押してください。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~</span></span></code></pre></div><p>記号 <code>~</code> は先ほど紹介した『ホームディレクトリ』を表します。この操作によってホームディレクトリに移動することができました。カレントディレクトリがホームディレクトリになった、と言い換えることもできます。</p><p>次に、以下を入力してください。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ls</span></span></code></pre></div><p><code>ls</code> はカレントディレクトリ直下に存在するファイルやディレクトリの名前の一覧を表示するコマンドでした。WSL2 環境のホームディレクトリにはデフォルトで何も入っていないので、上のコマンドを実行しても何も表示されなかったら正常です。プログラミング基礎講習会内での操作などですでにファイルが存在する場合がありますが、それでも問題ありません。</p><p>次に、以下を入力してください。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mkdir</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Desktop</span></span></code></pre></div><p>これで、WSL2 環境のホームディレクトリに &quot;Desktop&quot; という名前の空のディレクトリが作られます。もう一度 <code>ls</code> を実行して、新たに &quot;Desktop&quot; というディレクトリが出来ていることを確認してください。</p><p>さらに以下も入力します。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mkdir</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Downloads</span></span></code></pre></div><p>これでホームディレクトリにはそれぞれ &quot;Desktop&quot; と &quot;Downloads&quot; という名前の 2 つのディレクトリが作られたことになります。念のため <code>ls</code> を実行して 2 つのディレクトリが存在することを確かめてください。</p><div class="info custom-block"><p class="custom-block-title">なぜこんなことを？</p><p>Mac ではホームディレクトリに Downloads, Library, Desktop, Documents などの諸々のディレクトリが用意されているので、<code>cd ~</code> ののち <code>ls</code> と実行するとたくさんのディレクトリが表示されます。</p><p><img src="https://md.trap.jp/uploads/upload_ac42f59082d943e52dea2cd3e197ae2f.png" alt=""></p><p>以降の講習会の手順を Windows と Mac の両方で追えるようにするため、WSL2 のホームディレクトリに Desktop, Downloads という名前のディレクトリを仮で作成したという次第です。これらのディレクトリは Windows ネイティブ環境に用意されているデスクトップやダウンロードとは別物で、名前の通りの役割を与えられているわけではなく、あくまで仮のものです。将来的な混乱を避けたい場合は、この講習会の手順が一通り済んでからこれらのディレクトリを削除してもよいでしょう。</p></div>',26)]))}const u=a(o,[["render",p]]);export{k as __pageData,u as default};
