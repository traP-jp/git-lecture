import{_ as a,c as e,o as r,ag as i}from"./chunks/framework.DPDPlp3K.js";const g=JSON.parse('{"title":"ブランチ","description":"","frontmatter":{},"headers":[],"relativePath":"text/chapter-1/branch.md","filePath":"text/chapter-1/branch.md"}'),p={name:"text/chapter-1/branch.md"};function o(s,t,l,n,c,d){return r(),e("div",null,t[0]||(t[0]=[i('<h1 id="ブランチ" tabindex="-1">ブランチ <a class="header-anchor" href="#ブランチ" aria-label="Permalink to &quot;ブランチ&quot;">​</a></h1><p>Git リポジトリのファイルに加えられた変更は一つ一つが記録されています。この変更の列は 1 本の <strong>ブランチ</strong> を成します。</p><h2 id="ファイルの変更履歴" tabindex="-1">ファイルの変更履歴 <a class="header-anchor" href="#ファイルの変更履歴" aria-label="Permalink to &quot;ファイルの変更履歴&quot;">​</a></h2><p>前章の最後の画像を再掲します。ウィンドウの左下部分に注目してみましょう。</p><p><img src="https://md.trap.jp/uploads/upload_abd67dc27feefeff9b60fe81052d43f9.png" alt=""></p><p>更新を表す ○ が縦に直線で結ばれて連なっているのがわかります。コミットをする度にブランチは図の上方向に伸びていきます。</p><div class="info custom-block"><p class="custom-block-title">コミットグラフ</p><p>このように ○ と ○ 同士を結ぶ線によって変更の履歴を表現した図を <strong>コミットグラフ</strong> と呼びます。情報分野の「グラフ」が一般に「点を線で繋いだ図」を表す言葉だとご存知の方がいるかも知れません。ソース管理タブのボタンのアイコンや Git 自体のアイコンの意匠はこのコミットグラフが元になっています。枝分かれしているように見えるのは後編のネタバレなので一旦見なかったことにしてください。</p><p>ちなみに、リポジトリのコミットグラフは Gitea 上でも見ることができます。探してみましょう。</p></div><p>下の図でマウスのカーソルがある位置、コミットグラフ最上部の「README.md 更新」と出ている部分をクリックすると README.md の 3 行目とその下に赤と緑の帯がついて表示され、よく見ると左端にはそれぞれ「ー」「＋」と表示されています。これは、コミット「README.md 更新」では元々何も無かった 3 行目を「Hello Git!」に書き換えた、ということを表します。</p><p><img src="https://md.trap.jp/uploads/upload_1db06446d8bc41344dbb0979b3e964ae.png" alt=""></p><p>コミットグラフの隣に表示されているコミットメッセージと合わせると、一つ一つの変更について「<strong>どういう意図で</strong>」「<strong>どこをどう書き換えたのか</strong>」の情報が揃います。Git の一番の役割は「共同開発のバージョン管理を手助けする」ことですが、個人開発で Git を使うことにも「ひとまとまりの変更とその目的をあとから参照できる」という少なくとも一つの嬉しさがあるわけです。</p><p>参考までに、長くなると左下のコミットグラフはこうなります。存分にブランチが伸びまくっていて、下方の古い変更は見切れています。</p><p><img src="https://md.trap.jp/uploads/upload_f2ef6edf78f71afb20a6cc7d5120cb66.png" alt=""></p><h2 id="gitea-の役割" tabindex="-1">Gitea の役割 <a class="header-anchor" href="#gitea-の役割" aria-label="Permalink to &quot;Gitea の役割&quot;">​</a></h2><p>ここまでの操作を通して、Git と Gitea を組み合わせることでクラウドストレージのような使い方ができると分かりました。また、iCloud Drive や OneDrive のようなクラウドストレージと異なり、</p><ul><li><strong>同期は手動で行う</strong></li><li><strong>同期するディレクトリはデバイス内のどこにいくつ作ってもよい</strong></li><li><strong>変更履歴を分かりやすく確認できる</strong></li></ul><p>などの特徴があることが分かりました。ただし、今回 Downloads と Desktop の 2 ヶ所に mydrive を用意したのは異なるデバイスから Git リポジトリにアクセスすることを想定したシミュレーションに過ぎず、通常はデバイスにつき一つだけディレクトリを用意すればよいです。</p><p>Gitea は「<strong>Git リポジトリのホスティングサービス</strong>」です。Git は複数の場所に置かれたディレクトリ同士を上手く同期するために巧妙に作り上げられたツールです。ホスティングサービスはそのうち一つをサーバーに保管してくれるので、そことの同期を介して複数のデバイスに存在するディレクトリを同期させることができます。</p><div class="tip custom-block"><p class="custom-block-title">Gitea を使って Gitea を立てる</p><p>Gitea とは GitHub や GitLab などと同じホスティングサービスである、という説明はあながち間違いではないのですが、誤解を生みかねないのでここで 2 つの Gitea を区別してご説明します。</p><p><a href="https://about.gitea.com/" target="_blank" rel="noreferrer">Gitea</a> は GitHub や GitLab と同様のホスティングサービスを自分たちでサーバーを立てて運用するために活用できるオープンソースソフトウェア（OSS）です。traP でも Gitea を利用してサークルが管理するサーバーにホスティングサービス <a href="https://git.trap.jp" target="_blank" rel="noreferrer">git.trap.jp</a> を立ち上げ、それをそのまま Gitea と呼んでいます。このテキストのここ以外で登場する Gitea は全て後者です。</p></div><p>GitHub と Gitea は同じ役割を与えられたサービスであるだけに、Web ページの見た目や構造も瓜二つです。強いて言えば GitHub は日本語に対応していないのですが、Gitea を使いこなせるようになれば GitHub の基本的な使い方もある程度は類推できるはずです。</p>',19)]))}const h=a(p,[["render",o]]);export{g as __pageData,h as default};
