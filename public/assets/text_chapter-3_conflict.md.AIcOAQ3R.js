import{_ as p,c as t,o as e,ag as i}from"./chunks/framework.DPDPlp3K.js";const u=JSON.parse('{"title":"コンフリクトの解決","description":"","frontmatter":{},"headers":[],"relativePath":"text/chapter-3/conflict.md","filePath":"text/chapter-3/conflict.md"}'),s={name:"text/chapter-3/conflict.md"};function d(o,a,l,r,n,c){return e(),t("div",null,a[0]||(a[0]=[i('<h1 id="コンフリクトの解決" tabindex="-1">コンフリクトの解決 <a class="header-anchor" href="#コンフリクトの解決" aria-label="Permalink to &quot;コンフリクトの解決&quot;">​</a></h1><p>ひとつのファイルを互いに同期される前に別々の方法で書き換えると <strong>コンフリクト</strong>（競合）が生じることがあります。出会いがちなパターン 2 つについて、試せる解決方法を記します。</p><h2 id="マージ競合" tabindex="-1">マージ競合 <a class="header-anchor" href="#マージ競合" aria-label="Permalink to &quot;マージ競合&quot;">​</a></h2><p>mydrive リポジトリで main ブランチから sub ブランチを生やしたとします。main と sub のそれぞれで異なる内容で README.md を変更してコミットしたのち、sub を main にマージしようとするとコンフリクトが生じます。</p><p>コンフリクトが発覚するのはプルリクエストを出した直後の Gitea の画面上です。</p><p><img src="https://md.trap.jp/uploads/upload_f031d226198efdc4199c58f6bb6ae89b.png" alt=""></p><p>共同開発で起きやすいコンフリクトです。</p><h2 id="ローカル環境間の同期競合" tabindex="-1">ローカル環境間の同期競合 <a class="header-anchor" href="#ローカル環境間の同期競合" aria-label="Permalink to &quot;ローカル環境間の同期競合&quot;">​</a></h2><p>Desktop ディレクトリと Downloads ディレクトリの mydrive がともに main ブランチにいるとします。Desktop の mydrive で README.md を変更してコミットしたのち、Downloads の mydrive で「変更を同期」する前に README.md を変更してコミット、その後「変更を同期」しようとするとコンフリクトが生じることがあります。</p><p>コンフリクトが示唆されるのは VSCode 上で「変更の同期」ボタンを押した瞬間です。実はこのダイアログが出ていてもコンフリクトが発生しているとは限らないのですが、とりあえずこの後の手順を追えばよさそうです。詳しくは次の章で解説します。</p><p><img src="https://md.trap.jp/uploads/upload_813056da854bdcdec8d46d44a4eae254.png" alt=""></p><p>複数のデバイスからリポジトリにアクセスし、main ブランチに直接コミットしながら個人開発をしている時に起きやすいコンフリクトです。</p><h2 id="マージ競合の解決" tabindex="-1">マージ競合の解決 <a class="header-anchor" href="#マージ競合の解決" aria-label="Permalink to &quot;マージ競合の解決&quot;">​</a></h2><p>上で挙げた 2 種類のコンフリクトは一見して全く異なるものにも見えますが、じつは VSCode 上でほぼ同じ手順で解決することができます。ここでは「マージ競合」を例に説明します。</p><p>マージ競合が発生していることが Gitea の画面で判明したら、マージしようとしているブランチ（この場合は sub ブランチ）にいることを確認し、以下のように選択します。</p><p><img src="https://md.trap.jp/uploads/upload_44c9575beccfbbe302310bcd06be67e7.png" alt=""></p><p>次にウィンドウ上部で（マージ元のブランチとして）main を選択します。</p><div class="warning custom-block"><p class="custom-block-title">基本的に直接マージはしない</p><p>もしコンフリクトがなかったとすれば、ここまでの操作によって main → sub のマージが実行され、main の変更が sub に反映されます。お察しの通り、もし sub ではなく main にいる状態で逆の操作をすると、<strong>プルリクエストを出すことなく sub → main のマージが実行</strong>されます。</p><p>これは操作としては可能ですが、共同開発においては当然おすすめされません。というより、基本的に<strong>ブランチ同士を直接マージすることはありません</strong>。コンフリクトが生じたときだけが例外で、main の内容を sub に直接マージしてコンフリクトを解決するという操作を伴います。main へのマージを希望する場合は必ずプルリクエストを立てましょう。</p><p><img src="https://md.trap.jp/uploads/upload_7fe8280cf8e483dec18e0c6f476f1a9b.png" alt=""></p></div><p>マージ競合が発生している場合は、上の操作の直後に以下のような画面に飛びます。右下の「マージエディターで解決」ボタンを押してください。</p><p><img src="https://md.trap.jp/uploads/upload_aee5b36d6370b5d7c8f4d46ff076119e.png" alt=""></p><p>下図のようにエディタ部分が 3 つに分割されます。上 2 つがコンフリクトを起こしている場所の表示で、今いる sub ブランチでの変更は右側「現在のマシン」です。</p><p>sub ブランチでの変更を優先したい場合は「現在のマシン を適用する」を押します。main ブランチでの変更を優先したい場合は「受信中 を適用する」を押します。</p><p><img src="https://md.trap.jp/uploads/upload_f89835e91315d0f9da2da2dc6178b515.png" alt=""></p><p>上の図ではコンフリクトを生じている部分が濃い黄色の枠で囲まれていますが、コンフリクトが解決すると枠が目立たなくなります。全てのコンフリクトを解決したら右下の「マージの完了」ボタンを押してください。</p><p>すると、コミットメッセージが予め入力された状態で以下のように「続行」ボタンが表示されるので押します。そのあとの「変更の同期」ボタンまで押すことで、コンフリクトの解決および main → sub のマージが完了します。</p><p><img src="https://md.trap.jp/uploads/upload_4401cf0a67b3ae818726a7c490a3208b.png" alt=""></p><p>先ほどコンフリクトの発生を告げられた Gitea のページをリロードすると、コンフリクトが解消しプルリクエストが「マージコミットを作成」可能な状態になっていることが分かります。</p><p><img src="https://md.trap.jp/uploads/upload_29484fdddbddb8d94fab5ae668d0ec10.png" alt=""></p><h2 id="ローカル環境間同期競合の解決" tabindex="-1">ローカル環境間同期競合の解決 <a class="header-anchor" href="#ローカル環境間同期競合の解決" aria-label="Permalink to &quot;ローカル環境間同期競合の解決&quot;">​</a></h2><p>まず「キャンセル」を押してダイアログを消します。次に、マージ競合の解決のときと同様に「ブランチ &gt; マージ…」と選択し、<strong>マージ元のブランチとして origin/main を選択</strong>します。</p><div class="info custom-block"><p class="custom-block-title">origin/main → main のマージ</p><p>origin/main はリモートブランチ（厳密にはリモート追跡ブランチ）を表すので、「origin/main → main のマージ」という操作は先にコミットされた変更を手元の main ブランチに取り込むことを表します。</p></div><p>あとの手順はマージ競合の解決と同じです。</p><div class="tip custom-block"><p class="custom-block-title">手元のコミットをなかったことにする</p><p>場合によっては「ついうっかりコミットボタンを押してしまっただけなので、コンフリクトの解決だなんて大仰なことはしたくない」ということもあるかも知れません。一度コミットボタンを押してしまってから手元の変更を完全になかったことにするには、以下のように選択して「前回のコミットを元に戻す」を押してください。</p><p><img src="https://md.trap.jp/uploads/upload_089611b84af93aa3599452e3cf2a7e2d.png" alt=""></p><p>その後、全てのファイルの変更を破棄して「変更を同期」ボタンを押せば、新たにコミットをすることなく手元の環境をリモートブランチと同じ状態にすることができます。</p></div><h2 id="まず人に助けを求めよう" tabindex="-1">まず人に助けを求めよう <a class="header-anchor" href="#まず人に助けを求めよう" aria-label="Permalink to &quot;まず人に助けを求めよう&quot;">​</a></h2><p>コンフリクト（とくにマージ競合）の解決は、方法を誤るとシステムが正常に稼働しなくなるおそれがあるだけになかなか集中力が求められる作業です。競合箇所それぞれについて</p><ul><li>なぜコンフリクトしたか</li><li>競合の片方を優先するとシステム全体にどんな影響が生じるか</li></ul><p>をよく確認しながら解決していくことになります。大量にコンフリクトが生じていたり、編集した覚えのないファイルでコンフリクトが生じていたりすると厄介です。</p><p>共同開発でしっかり各々の役割分けがなされている場合、それぞれで変更を加えるファイルが異なるのでコンフリクトに出会うことは稀です。もし出会ってしまったら、自分で解決しようとせずチームメイトに助けを求めるのがより手早く安全な解決方法かも知れません。</p>',38)]))}const b=p(s,[["render",d]]);export{u as __pageData,b as default};
