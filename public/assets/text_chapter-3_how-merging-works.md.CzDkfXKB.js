import{_ as r,c as e,o as t,ag as s}from"./chunks/framework.DPDPlp3K.js";const g=JSON.parse('{"title":"マージのしくみ","description":"","frontmatter":{},"headers":[],"relativePath":"text/chapter-3/how-merging-works.md","filePath":"text/chapter-3/how-merging-works.md"}'),i={name:"text/chapter-3/how-merging-works.md"};function p(o,a,l,n,m,c){return t(),e("div",null,a[0]||(a[0]=[s('<h1 id="マージのしくみ" tabindex="-1">マージのしくみ <a class="header-anchor" href="#マージのしくみ" aria-label="Permalink to &quot;マージのしくみ&quot;">​</a></h1><p>前章ではコンフリクトの解決方法について表面的に説明しましたが、なぜその方法でよいのかを説明するために Git が採用しているマージアルゴリズムについて紹介します。</p><h2 id="_3-way-merge" tabindex="-1">3-way merge <a class="header-anchor" href="#_3-way-merge" aria-label="Permalink to &quot;3-way merge&quot;">​</a></h2><p>main ブランチの状態 O から sub ブランチを生やし、main ブランチと sub ブランチのそれぞれにコミットをしていったとします。その後、状態 Y まで進んだ sub ブランチを状態 X まで進んだ main ブランチにマージすることになりました。</p><p><img src="https://md.trap.jp/uploads/upload_b68dd1f1c5a09a34ce8c46c1e7f418c8.png" alt=""></p><p>Git はマージの実装に <strong>3-way merge</strong> と呼ばれる方式を採用しています。簡単に説明すると、<strong>状態 O, X, Y の 3 つだけを用いてマージ後の状態 Z を生成する</strong>という方式です。状態 O, X, Y はそれぞれ base, ours, theirs と呼ばれることがあります。</p><p>3-way merge におけるマージの手順を以下に示します。</p><ol><li>状態 O と 状態 X から差分 A&#39; を導く。同様に、状態 O と 状態 Y から差分 B&#39; を導く</li><li>差分 A&#39; と 差分 B&#39; を合成して合成差分を得る（コンフリクトの発生源）</li><li>状態 O に合成差分の変更を施した結果の状態 Z を得る</li><li>sub → main 方向のマージなので、main の先端に Z をつけてマージコミットを作成する</li><li>マージコミットの「変更内容」は X と Z の差分を導くことで逆算する</li></ol><div class="tip custom-block"><p class="custom-block-title">コミットグラフを構成する要素</p><p>コミットグラフにおいて、点（Node）は<strong>リポジトリのある状態</strong>を表し、矢印（有向辺、Directed Edge）は<strong>状態同士の親子関係</strong>を表します。単一ブランチ内でのコミットをはじめとして、ほとんどの場合で矢印は「（根本の状態から先端の状態への）変更」と同義です。しかし、ブランチ同士が合流するマージコミットのように、矢印が単に「変更」を意味するとは言えない場合もあります。</p><p>先ほどの図で Y → Z 方向の矢印を実線ではなく点線で示したのは、この矢印が「変更」を意味しないからです。Z は確かに状態 X と Y 両方の子の状態ですが、マージコミットにおける sub の寄与としては「main の新しいコミットに sub の情報が用いられた」に過ぎず、sub → main のマージの後も依然として sub の先端は Y のままになっています。</p></div><p>3-way merge における重要な点をいくつか挙げます。</p><ul><li>O から X, Y に至るまでのコミット群 A, B の<strong>途中経過はマージの結果に影響しません</strong>。Z を決めるのは専ら O, X, Y の 3 つの状態であり、それ以外は参照されません。</li><li>合成差分を得るとき、差分 A&#39; と B&#39; は同列に扱われます。すなわち、main → sub のマージと sub → main のマージでは<strong>全く同じ状態 Z が得られる</strong>ことになります。ただし、Z がつく部分が main の先端になるか、sub の先端になるかはマージの方向によって異なります。</li></ul><div class="tip custom-block"><p class="custom-block-title">マージ競合の解決</p><p>前章で紹介したマージ競合の解決方法は大まかに以下の流れを辿りました。</p><ol><li><strong>main → sub のマージ</strong>（コンフリクトの解決を伴う）</li><li><strong>sub → main のマージ</strong>（PR を立てる）</li></ol><p>この説明を聞いて「<strong>main → sub 方向のマージのコンフリクトを解決することで、なぜ直ちに sub → main 方向のマージのコンフリクトも解決できるのか？</strong>」と疑問に思った方はとても鋭いです。その理由はここで説明した 3-way merge の仕組みに基づいて述べることができます。</p><p>3-way merge においてマージ後の状態の生成に用いられるのは「それぞれのブランチの最新の状態」そして「<strong>それらの最も近い共通の祖先</strong>」です。main → sub 方向のマージによって、main の最新状態は X、sub の最新状態は Z になります。これらの最も近い共通の祖先は X 自身であり、Z はその子にあたる状態です。従って、続けて sub → main のマージをする際には X → Z の差分をそのまま合成差分として用いることができ、差分の合成においてコンフリクトが生じることがありません。</p><p><img src="https://md.trap.jp/uploads/upload_6cca7b85d6c6811a7010e38ff59b6eea.png" alt=""></p></div><h2 id="fast-forward-merge" tabindex="-1">Fast-Forward merge <a class="header-anchor" href="#fast-forward-merge" aria-label="Permalink to &quot;Fast-Forward merge&quot;">​</a></h2><p>前編 <a href="/text/chapter-1/git-commands.html">Git の操作の実体</a> の章で触れた通り、pull とは fetch + merge です。VSCode 上で「変更の同期」ボタンを押すたびに 3-way merge の処理が走るということになります。</p><p>しかし、それにしてはコミットグラフにマージの形跡が見当たりません。これは、最後の同期以後ローカルにコミットが一つもない場合の pull のマージでは <strong>Fast-Forward merge</strong> と呼ばれる特殊なマージ処理がはたらく条件が整っているからです。</p><p><img src="https://md.trap.jp/uploads/upload_69385f8e803b6a200ae80e2acb986ad3.png" alt=""></p><p>Fast-Forward merge は</p><ul><li><strong>マージ先のブランチが共通の根から一度もコミットされていない場合に限り</strong></li><li><strong>マージ元のブランチにおける全ての変更をマージ先のブランチで行っていたことにできる</strong></li></ul><p>マージ処理です。上の図では origin/main（マージ元のリモートブランチ）におけるすべての変更が main（マージ先のローカルブランチ）でも行っていたことにされています。その結果コミットグラフには枝分かれやマージの形跡が残らず、ずっと手元の main の上で作業していましたと言わんばかりの真っ直ぐな 1 本のコミット列が続いていくことになります。</p><p>ただし、この Fast-Forward merge を条件によって発動させない設定にすることもできます。たとえば、プルリクエストを立てて行った main へのマージでは、たとえ main からブランチを生やしてから一度も main に動きがなかったとしても「ブランチを生やしてコミットしてからマージした」という履歴を残したい場合があります。このようなニーズに対応し、Gitea などホスティングサービスの側でプルリクエストをマージするにあたり「Fast-Forward merge を適用する」か「マージコミットを作成する」かを選択できることが多いです。</p><p><img src="https://md.trap.jp/uploads/upload_acdb1fa65450011ad68c4293444770fa.png" alt=""></p><div class="tip custom-block"><p class="custom-block-title">pull でマージコミットが生じる場合</p><p>最後の同期以後 origin/main と main の双方にコミットが存在する状態で pull を実行した場合、Fast-Forward merge は発動せずマージコミットが作成されることになります。この場合コミットグラフ上には「origin/main から <strong>ローカルの</strong> main に枝分かれしてコミットがなされ、そしてマージされた」という形跡が残ります。普段はお目にかかれない「<strong>origin/main と main の本質的相違</strong>」の証左です。</p><p>ところで、もしコンフリクトがあれば前章で紹介した通りの方法で解決してから手動で origin/main → main のマージを実行することになりますが、仮にコンフリクトを生じない変更だったとしても VSCode 上で「変更の同期」ボタンを押した瞬間にはダイアログが表示されます。Git の操作としては可能でも「普通はやらない異常な操作」であることには変わりないからでしょうか。</p></div><h2 id="その他の-git-の機能" tabindex="-1">その他の Git の機能 <a class="header-anchor" href="#その他の-git-の機能" aria-label="Permalink to &quot;その他の Git の機能&quot;">​</a></h2><p>ここまでのテキストでまだ登場していない Git の機能をいくつか紹介します。基本的にはすでに紹介したことだけ知っていれば問題なく開発を進めていくことができますが、より整然とした開発を実現するために以下のような機能が役に立つことがあります。</p><h3 id="stash" tabindex="-1">stash <a class="header-anchor" href="#stash" aria-label="Permalink to &quot;stash&quot;">​</a></h3><p>作業ディレクトリにおける変更内容をコミットせず一時的に控えておくことができる機能です。間違えて別のブランチで作業をしてしまい、途中でそれに気付いたときにはそれまでの変更を stash して適切なブランチに移動してから適用し直すことができます。</p><p>おすすめは、控えておきたい変更をすべてステージして以下のように選択することです。ステージされている変更が全て 1 つのスタッシュに入ります。スタッシュ名は空で問題ありません。</p><p><img src="https://md.trap.jp/uploads/upload_523a3518ad615f079acc3530beb9bbda.png" alt=""></p><p>適切なブランチに移動したのち上図に見つかる『最新のスタッシュをポップ』を選択すると、先ほど控えた変更を反映させることができます。ただし、ここでもコンフリクトが解決する可能性はあります。</p><h3 id="cherry-pick" tabindex="-1">cherry-pick <a class="header-anchor" href="#cherry-pick" aria-label="Permalink to &quot;cherry-pick&quot;">​</a></h3><p>現在のブランチに別の場所から持ってきたコミットを適用できる機能です。名前は「さくらんぼ狩り」という意味です。1 つのコミットだけとってくるからですね。</p><p><img src="https://md.trap.jp/uploads/upload_e45ed3daaea5c91ba9d964bc11efc2b2.png" alt=""></p><p>cherry-pick には 2-way patch と呼ばれるアルゴリズムが用いられます。コミットにおける「変更」は元の状態を前提とするため、現在のブランチの先端 Y と持ってくるコミットの根元の状態 O がかけ離れているとコンフリクトが生じることがあります。</p><h3 id="rebase" tabindex="-1">rebase <a class="header-anchor" href="#rebase" aria-label="Permalink to &quot;rebase&quot;">​</a></h3><p>現在のブランチが「枝分かれ元のブランチの最新状態から始まった」ことにできます。名の通り「根を変える」機能です。</p><p><img src="https://md.trap.jp/uploads/upload_ef671a738d519b0732e081e5bf502ffe.png" alt=""></p><p>基本的な仕組みは cherry-pick の繰り返しです。状態 O から始まる sub ブランチの過去のコミットそれぞれを状態 X から順に生やしていきます。</p><p>cherry-pick と異なるのは、rebase を実行しても main には影響せず sub ブランチの内容が書き換えられるという点です。ただし、その結果 sub は main への Fast-Forward merge が可能な形になるので、合わせて実行すれば main にコミットが増えることと同じになります。Fast-Forward merge の項で紹介した Gitea のキャプチャに含まれるブランチ統合の選択肢「リベース後にファストフォワード」はまさにその操作を表しています。</p><div class="tip custom-block"><p class="custom-block-title">インタラクティブリベース</p><p>Git の rebase コマンドにオプション <code>-i</code> をつけることでインタラクティブリベースを開始することができます。インタラクティブリベースは原義 rebase を大幅に拡張した汎用的な歴史改変ツールであり、たとえば以下のような操作を可能にします。</p><ul><li>コミットの順序を変更する</li><li>複数のコミットを一つにまとめる ／ 一つのコミットを分割する</li><li>コミットメッセージを修正する</li></ul><p>コミットグラフの見やすさに気を遣う開発者は、インタラクティブリベースを活用して一連のコミットを綺麗にまとめてからリモートにプッシュすることがあります。一旦コミットしてからその順序や内容を整理することで、他者から見てそれぞれのコミットの意図がより明瞭になるからです。</p><p>ただし、その性質上インタラクティブリベースの使用はリスクを伴います。上で述べた使用例ではローカルだけで操作を済ませているのでよいのですが、すでにリモートブランチにプッシュされたコミットに対して歴史改変を試みると他の開発者が所有するコミットグラフとの間に矛盾が発生し、開発作業が正常に進行しなくなるおそれがあります。</p></div>',39)]))}const u=r(i,[["render",p]]);export{g as __pageData,u as default};
