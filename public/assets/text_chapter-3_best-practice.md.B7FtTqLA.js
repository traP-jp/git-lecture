import{_ as e,c as a,o as r,ag as o}from"./chunks/framework.DPDPlp3K.js";const g=JSON.parse('{"title":"共同開発のすすめ","description":"","frontmatter":{},"headers":[],"relativePath":"text/chapter-3/best-practice.md","filePath":"text/chapter-3/best-practice.md"}'),c={name:"text/chapter-3/best-practice.md"};function d(s,t,l,i,n,p){return r(),a("div",null,t[0]||(t[0]=[o('<h1 id="共同開発のすすめ" tabindex="-1">共同開発のすすめ <a class="header-anchor" href="#共同開発のすすめ" aria-label="Permalink to &quot;共同開発のすすめ&quot;">​</a></h1><p>最後に、統制の効いた共同開発においてはコミットメッセージやブランチ名、その他の Git や Gitea の扱いにどんなルールが定められているのか、よくある例をいくつか紹介します。</p><p>この章の内容の実践が個人開発やハッカソンの共同開発において強制されることは普通ありません。まずはそんなことを気にせず積極的に開発に参加するのがよいです。その上で、責任ある開発の現場でどんなルールが採用されているのかについて少しでも知っておくと、その知識が普段の開発にも何か示唆を与えてくれるかも知れません。</p><h2 id="接頭辞" tabindex="-1">接頭辞 <a class="header-anchor" href="#接頭辞" aria-label="Permalink to &quot;接頭辞&quot;">​</a></h2><p>コミットメッセージやブランチ名の頭に決まった種類の接頭辞をつけることで、そのコミットやブランチの意図の分類を明確にすることが出来ます。たとえば以下がよく使われます。</p><table style="width:100%;border-collapse:collapse;"><thead><tr><th style="width:auto;text-align:center;">接頭辞</th><th style="width:100%;">一般的な意味合い</th></tr></thead><tbody><tr><td style="text-align:center;"><strong>feat</strong></td><td>新機能の追加</td></tr><tr><td style="text-align:center;"><strong>fix</strong></td><td>既存の機能の問題修正</td></tr><tr><td style="text-align:center;"><strong>hotfix</strong></td><td>緊急の問題修正</td></tr><tr><td style="text-align:center;"><strong>style</strong></td><td>コードのスタイル変更やフォーマット</td></tr><tr><td style="text-align:center;"><strong>docs</strong></td><td>ドキュメントの変更</td></tr><tr><td style="text-align:center;"><strong>chore</strong></td><td>コードやドキュメントに影響しない作業</td></tr><tr><td style="text-align:center;"><strong>refactor</strong></td><td>リファクタリング（コードの整頓）</td></tr></tbody></table><p>コミットメッセージに接頭辞をつける場合は <code>feat: 行った操作</code> のように、ブランチ名に接頭辞をつける場合は <code>feat/取り組む予定の変更</code> のように書くことが一般的です。traQ フロントエンドリポジトリの <a href="https://github.com/traPtitech/traQ_S-UI/branches/all" target="_blank" rel="noreferrer">Branches</a> と <a href="https://github.com/traPtitech/traQ_S-UI/commits/master/" target="_blank" rel="noreferrer">Commits</a> で実例を確認してみましょう。</p><div class="info custom-block"><p class="custom-block-title">ブランチ名に含まれるスラッシュ</p><p>Git ではブランチ名にスラッシュ <code>/</code> を含めることができます。このスラッシュはディレクトリのパスに含まれる <code>/</code> に似た振る舞いを示し、たとえばすでに <code>docs/README.md 整備</code> という名のブランチが存在する場合は新たに <code>docs</code> という名前のブランチを作ることが許されなくなります。</p></div><h2 id="ブランチ戦略" tabindex="-1">ブランチ戦略 <a class="header-anchor" href="#ブランチ戦略" aria-label="Permalink to &quot;ブランチ戦略&quot;">​</a></h2><p><a href="/text/chapter-2/repository.html#リポジトリ-1">リポジトリ</a> の章で GitHub Flow というものに触れました。これは、リポジトリでの開発を効率的・安全に進めるために提唱されたブランチの役割分けの方法（ブランチ戦略）の最もシンプルな例のひとつです。</p><p><img src="https://md.trap.jp/uploads/upload_9d311d90dec6278a134f25b368c9c0a3.png" alt=""></p><p>上図は代表的なブランチ戦略それぞれにおける各ブランチの呼び名と関係の図解です。上図に登場する feature ブランチは、feat『新機能の追加』に限らず幅広い種類の『ひとまとまりの変更』を意味するものと考えていただいて大丈夫です。</p><p>GitHub Flow では feature を main にマージすることで変更が即座に本番環境に反映されるので、頻繁に本番用のブランチが更新される、迅速な開発を可能にする戦略です。traP ではほとんどのプロダクトの開発に GitHub Flow が採用されていますが、ある程度長期的・保守的な共同開発では feature がマージされるブランチと本番用のブランチを分離する Git Flow や GitLab Flow が好まれることがあります。</p><div class="tip custom-block"><p class="custom-block-title">トランクベース開発</p><p><a href="/text/chapter-2/repository.html">リポジトリ</a> の章で述べた通り、共同開発で main に直接コミットしていこうとすると複数の部分の開発を同時に進めることが極端に難しくなります。それゆえこの方法はあくまで個人開発向きであり、共同開発に採用するのは『実用的ではない』としました。しかし、実は共同開発でこのようなブランチ運用をしている場合もあるにはあり『トランクベース開発』と呼ばれています。小規模なチーム全体である狭い範囲の開発をハイスピードで進めるために限定的にとられる手法です。</p></div>',14)]))}const m=e(c,[["render",d]]);export{g as __pageData,m as default};
