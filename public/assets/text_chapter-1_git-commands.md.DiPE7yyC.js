import{_ as s,c as i,o as a,ag as e}from"./chunks/framework.DPDPlp3K.js";const k=JSON.parse('{"title":"Git の操作の実体","description":"","frontmatter":{},"headers":[],"relativePath":"text/chapter-1/git-commands.md","filePath":"text/chapter-1/git-commands.md"}'),n={name:"text/chapter-1/git-commands.md"};function l(p,t,r,h,d,o){return a(),i("div",null,t[0]||(t[0]=[e(`<h1 id="git-の操作の実体" tabindex="-1">Git の操作の実体 <a class="header-anchor" href="#git-の操作の実体" aria-label="Permalink to &quot;Git の操作の実体&quot;">​</a></h1><p>この章では、前編で行ってきた VSCode 上のボタン操作の裏でどんな処理がなされていたのかを解説し <code>git fetch</code> や <code>git pull</code> といったコマンドとの関係を明らかにします。</p><h2 id="ブランチ内での操作" tabindex="-1">ブランチ内での操作 <a class="header-anchor" href="#ブランチ内での操作" aria-label="Permalink to &quot;ブランチ内での操作&quot;">​</a></h2><p>以下の図は 1 本のブランチ（ここでは main という名前のブランチ）に関する操作の一覧です。</p><p><img src="https://md.trap.jp/uploads/upload_20ec43238b38dfef06c692b80c4469fa.png" alt=""></p><p>全体が同期するので 1 本と見なすことが一般的ですが、実際には</p><ul><li><strong>リモートブランチ</strong></li><li><strong>リモート追跡ブランチ</strong></li><li><strong>作業ブランチ</strong></li></ul><p>の 3 本が束になっています。リモートブランチは Gitea のサーバー上にあり、他の 2 本はローカル（お使いのデバイスの中）にあります。</p><div class="tip custom-block"><p class="custom-block-title">リモート追跡ブランチはブランチではない</p><p>リモート追跡ブランチは Git のシステムにおいて通常のブランチと同等なものではありません。リモート追跡ブランチは「リモートブランチのスナップショット」に過ぎず、fetch 以外の更新操作を受け付けません。ローカル環境におけるリモートブランチの代役という認識でよいと思います。</p></div><p>上図における各操作の意味は以下の通りです。</p><table style="width:100%;border-collapse:collapse;"><thead><tr><th style="width:auto;text-align:center;text-wrap:nowrap;">Git 操作</th><th style="width:100%;">意味</th></tr></thead><tbody><tr><td style="text-align:center;"><strong>clone</strong></td><td>リモートからコピーして、ローカルにリモート追跡ブランチと作業ブランチを用意する</td></tr><tr><td style="text-align:center;"><strong>fetch</strong></td><td>リモート追跡ブランチを現在のリモートブランチと同じ状態にする</td></tr><tr><td style="text-align:center;"><strong>merge</strong></td><td>リモート追跡ブランチの変更を作業ブランチに反映する</td></tr><tr><td style="text-align:center;"><strong>commit</strong></td><td>作業ブランチに変更を記録する</td></tr><tr><td style="text-align:center;"><strong>pull</strong></td><td>fetch + merge</td></tr><tr><td style="text-align:center;"><strong>push</strong></td><td>作業ブランチの変更をリモートブランチに反映する</td></tr></tbody></table><p>前編でターミナル及び VSCode 上で行った操作との対応は以下のようになります。</p><table style="width:100%;border-collapse:collapse;"><thead><tr><th style="width:100%;">ターミナル &amp; VSCode 上での操作</th><th style="width:auto;text-align:center;text-wrap:nowrap;">Git 操作</th></tr></thead><tbody><tr><td>コマンド <code>git clone ssh://から始まる文字列</code> の実行</td><td style="text-align:center;"><strong>clone</strong></td></tr><tr><td>Desktop の mydrive で README.md を編集して「コミット」ボタンを押す</td><td style="text-align:center;"><strong>commit</strong></td></tr><tr><td>Desktop の mydrive で「変更を同期 ↑1」ボタンを押す</td><td style="text-align:center;"><strong>push</strong></td></tr><tr><td>Downloads の mydrive で「変更の同期 ↓1」ボタンを押す</td><td style="text-align:center;"><strong>merge</strong></td></tr></tbody></table><p>この表には fetch が含まれていませんが、<a href="/text/chapter-1/requirements.html#vscode-の設定">必要なツール</a> の章で Autofetch 設定を <code>true</code> にしたことで作業ブランチへの fetch 操作が 180 秒おきに自動で行われるようになっています。<a href="/text/chapter-1/commit-and-sync.html#リポジトリの同期">コミットと同期</a> の章で Downloads の mydrive を開いてすぐ「コミット」ボタンが勝手に「変更の同期 1↓」ボタンに変化したのは、この Autofetch が働いたからです。</p><div class="tip custom-block"><p class="custom-block-title">ターミナルから Git を操作する</p><p><a href="/text/chapter-1/cli-and-gui.html">CLI と GUI</a> の章で紹介したように、Git は CLI ソフトウェアなので Git リポジトリの操作は全てターミナル上で行うことができ、そしてそれが本来想定されていた使い方だったりします。<a href="/text/chapter-1/make-repo.html">リポジトリの作成</a> および <a href="/text/chapter-1/commit-and-sync.html">コミットと同期</a> で行ってきた全ての操作は以下のコマンド列で再現することができます。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 1. Desktop ディレクトリと Downloads ディレクトリにリポジトリをクローン</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/Desktop</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ssh://から始まる文字列</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/Downloads</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ssh://から始まる文字列</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 2. Desktop ディレクトリの mydrive の README.md に nano で変更を加える</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/Desktop/mydrive</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nano</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> README.md</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 3. 変更をコミット・プッシュする</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> README.md</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;README.md 更新&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> main</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 4. Downloads ディレクトリの mydrive で変更をプルする</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/Downloads/mydrive</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pull</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> main</span></span></code></pre></div><p>途中で登場する nano はターミナル上で動作するテキストエディタです。<a href="https://pg-basic.trap.show/text/chapter-1/practice/nano-test.html" target="_blank" rel="noreferrer">プログラミング基礎講習会第 1 章の練習問題</a> にも登場していますね。<code>Ctrl</code> + <code>X</code> の同時押しでエディタの終了操作、そこで <code>y</code> に続いて <code>Enter</code> を押すことで変更の保存ができます。</p></div><p>日頃の開発で「ブランチにコミットする」という言葉を聞いたら、通常は以下の一連の操作を指すと思ってよいでしょう。</p><ol><li>開発途中のブランチの最新状態をリモートから pull (fetch + merge) してくる</li><li>ファイルの中身を変更し、作業ブランチに commit する</li><li>作業ブランチの変更を push してリモートブランチに反映させる</li></ol><p>1 と 3 は結局のところ「リモートとローカルを同期する」ための操作です。「ブランチへのコミット」という操作は「<strong>同期</strong> → <strong>作業ブランチへのコミット</strong> → <strong>同期</strong>」という 3 段階によってリモートとローカルの両方に同じ変更を加えることを意味しています。</p><hr><p><a href="https://q.trap.jp/channels/event/workshop/git/exercise" target="_blank" rel="noreferrer">#event/workshop/git/exercise</a> の『<strong>前編完走</strong>』にスタンプをつけよう！</p>`,20)]))}const g=s(n,[["render",l]]);export{k as __pageData,g as default};
