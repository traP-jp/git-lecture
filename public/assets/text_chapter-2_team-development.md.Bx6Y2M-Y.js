import{_ as a,c as e,o as i,ag as r}from"./chunks/framework.DPDPlp3K.js";const u=JSON.parse('{"title":"共同開発の基本","description":"","frontmatter":{},"headers":[],"relativePath":"text/chapter-2/team-development.md","filePath":"text/chapter-2/team-development.md"}'),s={name:"text/chapter-2/team-development.md"};function o(p,t,l,n,d,m){return i(),e("div",null,t[0]||(t[0]=[r('<h1 id="共同開発の基本" tabindex="-1">共同開発の基本 <a class="header-anchor" href="#共同開発の基本" aria-label="Permalink to &quot;共同開発の基本&quot;">​</a></h1><p>GitHub Flow に従った共同開発の現場において、個人の作業は以下の繰り返しです。</p><ol><li><strong>main からブランチを生やす</strong></li><li><strong>ブランチ内でコミットをしていく</strong></li><li><strong>変更が済んだらプルリクエストを立てる</strong></li><li><strong>main にマージする</strong></li></ol><p>ここまでの操作で全て体験できましたね。この章ではそれぞれの操作の意味を明確にします。</p><h2 id="プルリクエスト" tabindex="-1">プルリクエスト <a class="header-anchor" href="#プルリクエスト" aria-label="Permalink to &quot;プルリクエスト&quot;">​</a></h2><p><strong>プルリクエスト</strong>（Pull Request, PR）という機能はバージョン管理ツールとしての Git 自体には存在せず、GitHub や Gitea などのホスティングサービスの側が提供しています。前章では色々とすっ飛ばしてマージまで行ってしまいましたが、共同開発では本来ここで変更点に問題がなさそうか、チームの審判を仰ぐためのワンクッションとして機能するものです。</p><div class="warning custom-block"><p class="custom-block-title">プルリクエストは「プルのリクエスト」ではない</p><p>プルリクエストの趣旨は「このブランチを main に <strong>マージ</strong> してほしい」であって、その先の「このブランチがマージされたら各自で main を <strong>プル</strong> してほしい」ではありません。歴史的経緯から「プルリクエスト」という名前で今まで通ってきたものの、ややこしいという指摘は未だに受け続けているようです。GitHub や Gitea では「プルリクエスト」と呼ばれていますが、他の著名なホスティングサービスの一つである GitLab では「マージリクエスト」というより直感的な表現が使われています。</p></div><p>マージという言葉には前編で説明した以上の意味があることがお分かりになるかと思います。一般に「<strong>ブランチの変更内容同士を統合すること</strong>」をマージと呼びます。</p><p>「sub → main のマージ」とは main ブランチから sub ブランチを生やした分岐点以降の main と sub それぞれの変更を統合して main に反映させることを意味します。ところが、前章までの実習では sub ブランチをマージするまでの間 main ブランチに何も変更を加えていないので、マージによって main に sub の変更がそのまま反映されたのです。</p><div class="warning custom-block"><p class="custom-block-title">マージ元はマージの影響を受けない</p><p>sub の変更を main にマージした直後でも sub と main が全く同じ状態になるとは限らないことに注意が必要です。マージされるのは「状態」ではなく「<strong>変更</strong>」なので、sub ブランチの中で変更された箇所以外の sub ブランチの内容は main には影響を与えません。</p><p><img src="https://md.trap.jp/uploads/upload_8b27e59a114f984bf7c41d456dc95b40.png" alt=""></p><p style="font-size:12px;text-align:center;margin:-8px 0 0 0;">sub をマージしてもファイル A の状態が戻るわけではない</p></div><p>ブランチが途中で生えたりマージされたりするとコミットグラフはこんな感じになります。</p><p><img src="https://md.trap.jp/uploads/upload_8354df7754459cfd08b0e67b333e8b19.png" alt=""></p><div class="tip custom-block"><p class="custom-block-title">ちょっと待って、マージってすごいのでは</p><p>Exactly、すごいです。「分岐点以降のそれぞれのブランチの変更を統合する」という操作を手動で行おうとすると、2 通りの変更を見比べながら以下を地道にやっていくことになります。</p><ul><li>リポジトリで <strong>ディレクトリやファイルが作られたり消されたりしていないか</strong> を確認して統合する</li><li>各ファイルについて <strong>どこが書き換えられたか</strong> を確認して統合する</li></ul><p>とんでもない時間と集中力を要する作業です。大掛かりな変更のマージとなれば人間に出来た仕事ではありません。これを自動化できるという嬉しさが開発者が揃って Git に依存する一つの理由です。この機能がなければブランチを生やすことは面倒事を生やすことと同義になってしまいます。</p><p>ところでこの操作、自動化には限界がありそうだと感じた方は鋭いです。同じ部分が異なる内容に書き換えられたりしてどちらを優先してよいか分からないという状態に遭遇すると、Git はマージを中断して開発者に手動マージを求めます。この操作を <a href="/text/chapter-3/conflict.html">コンフリクトの解決</a> と呼びます。</p></div><h2 id="gitea-の機能" tabindex="-1">Gitea の機能 <a class="header-anchor" href="#gitea-の機能" aria-label="Permalink to &quot;Gitea の機能&quot;">​</a></h2><p>Gitea など多くのホスティングサービスは共同開発の効率化のために様々な機能を提供しています。これらはプルリクエストと同じく Git には存在しない機能です。</p><ul><li><p><strong>Issue</strong> ... Gitea や GitHub には、そのプロダクトについて「現状の問題点」とか「やるべきこと」をメモ・共有するために Issue を立てる機能があります。Issue にはその問題点の性質を示すタグをつけることができます。<a href="https://github.com/traPtitech/traQ_S-UI/issues" target="_blank" rel="noreferrer">traQ フロントエンドリポジトリ の Issues</a> を見るとこの機能の意義が掴めると思います。</p></li><li><p><strong>レビュー</strong> ... 立てられたプルリクエストにおける変更に問題がなさそうかを検証することです。Gitea 上でもレビューをするための UI や機能が提供されていて、1 人以上の Approve がなければプルリクエストのマージができないような設定にすることもできます。</p></li></ul><div class="tip custom-block"><p class="custom-block-title">Git without ホスティングサービス</p><p>Git は独立したソフトであり、GitHub や Gitea などのホスティングサービスなしに活用することができます。とはいえ、ホスティングサービスが提供する機能も非常に便利なので、セキュリティ上の懸念など特殊な事情がない限り Git とホスティングサービスは一緒に使うのが一般的です。ちなみに、traP にはホスティングサービスに頼らない Git 開発の経験がある人もいるみたいです。</p></div><h2 id="readme-md-とは何か" tabindex="-1">README.md とは何か <a class="header-anchor" href="#readme-md-とは何か" aria-label="Permalink to &quot;README.md とは何か&quot;">​</a></h2><p>これまで README.md というテキストファイルを編集しながら Git の操作を学んできました。</p><p>README.md は Gitea などのホスティングサービスによって特殊な扱いを受けるファイルです。具体的には、もし Git リポジトリの中に README.md というファイルが含まれていれば、Gitea 上のリポジトリのページではそのファイルの最新の状態を大きく表示します。</p><p><img src="https://md.trap.jp/uploads/upload_19bdd8d79f84cc5219f31e028a3a7e2d.png" alt=""></p><p>「私を読んで！」という意味の名前から察されるように、この README.md というファイルは本来<strong>開発者がそのリポジトリで何を開発しているかの説明</strong>を Markdown 形式で書くためのものです。<a href="https://github.com/traPtitech/traQ_S-UI" target="_blank" rel="noreferrer">traQ フロントエンドリポジトリ</a> の README.md などはよい書き方の例です。</p><p>とはいえ、リポジトリを開発以外の用途に供していたり、そもそも非公開に設定していたりする場合、README.md を詳しく書く必要はありません。この講習会では、README.md を単に「Gitea 上で最新の状態をすぐに確認できる体のよいテキストファイル」として編集していただきました。</p><h2 id="リポジトリは壊せない" tabindex="-1">リポジトリは壊せない <a class="header-anchor" href="#リポジトリは壊せない" aria-label="Permalink to &quot;リポジトリは壊せない&quot;">​</a></h2><p>この Git 講習会で最も知ってほしいことをひとつ書くとするなら、「<strong>初学者に Git リポジトリは壊せない</strong>」ということです。Git が単に「共同開発のためのツール」であることしか知らなければ「素人が適当に操作すると手軽に全てを台無しにしうる」という先入観を抱いても無理はありません（筆者もそうでした）。ところが実際はその逆で、Git リポジトリはたとえ知識がある人でも復元不能に追い込むことは難しいのです。</p><h3 id="ブランチを勝手に作成" tabindex="-1">ブランチを勝手に作成 <a class="header-anchor" href="#ブランチを勝手に作成" aria-label="Permalink to &quot;ブランチを勝手に作成&quot;">​</a></h3><p>既存のリポジトリに勝手にブランチを生やすことは、開発の本筋にさしたる影響を与えません。それどころか気付かれもしないかも知れません。気軽にいじくってみましょう。</p><h3 id="main-にコミット-ブランチを勝手にマージ" tabindex="-1">main にコミット &amp; ブランチを勝手にマージ <a class="header-anchor" href="#main-にコミット-ブランチを勝手にマージ" aria-label="Permalink to &quot;main にコミット &amp; ブランチを勝手にマージ&quot;">​</a></h3><p>リポジトリには（発展編で説明されるような特殊な操作をしない限り）過去のあらゆる状態の履歴が残っています。単にコミットを過去に戻せばよいだけなので、知識がある人なら復元には 5 分とかかりません。まして厳格な開発ならブランチに保護がかかっていたりして、勝手にマージすることは物理的に不可能だったりします。</p><h3 id="リポジトリを削除" tabindex="-1">リポジトリを削除 <a class="header-anchor" href="#リポジトリを削除" aria-label="Permalink to &quot;リポジトリを削除&quot;">​</a></h3><p>もしあなたが相当な曲者で、Gitea 上でリポジトリの削除ボタンに手を伸ばす勇気があったとしたら、確かに一瞬だけ Gitea からリポジトリは消滅します。ところが、それが個人開発のリポジトリならともかく、共同開発においては協力メンバー一人一人の手元にリポジトリのほとんど完全なコピーが残っているので、誰かがそれを新たに Gitea にアップロードすれば何事もなかったかのように開発は続いていきます。</p><hr><p>あなたがどれほど Git リポジトリを下手に扱ったとしても、共同開発を立ち行かなくさせることはできません。それを知っていれば必要以上に Git の使用を怖がらずに済むでしょう。それでも不安は不安だ、という人は、Git + Gitea を単なる iCloud Drive や OneDrive の代わりとして普段使いしてみるとよいと思います。手に馴染ませるほど、Git は今まで敬遠していたのが嘘のように堅牢で便利なツールであると分かってくるはずです。</p>',33)]))}const h=a(s,[["render",o]]);export{u as __pageData,h as default};
